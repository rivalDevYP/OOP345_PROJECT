// • bool pop(CustomerOrder& ready) – a modifier that receives an lvalue reference to a
// customer order, removes the order at the front of the queue and moves it to the calling
// function through the parameter list. This function returns true if the station filled its
// part of the order; false otherwise. If there are no orders in the queue, this function
// returns false

// version 1

bool Station::pop(CustomerOrder& ready)
{
	// remove order at front of queue
	myCustomerOrder.pop_front();
	// move it to calling function through parameter list
	ready.operator=(std::move(myCustomerOrder[0]));
	// return true if station filled order
	if (ready.isFilled())
		return true;
	else
		return false;
	// if no orders in queue, return false
	if (myCustomerOrder.size() == 0)
		return false;
}

// corrections:	check # of orders in queue BEFORE you attempt to pop the top
//		move over the first customer order BEFORE you pop the top, to prevent access memory violation (trying to something that's not there or has previously been deleted)

bool Station::pop(CustomerOrder& ready)
{
	if (myCustomerOrder.size() > 0)
	{
		ready.operator=(std::move(myCustomerOrder[0]));
		myCustomerOrder.pop_front();
		if (ready.isFilled())
			return true;
		else
			return false;
	}
	else
	{
		return false;
	}
}
		

// bool run(std::ostream& os) – a modifier that receives a
// reference to an std::ostream object. If there is a customer
// order on the back of the queue of orders waiting to be filled,
// this function moves it to the starting station on the line. This
// function then executes one fill step of the assembly process
// at each station on the line, by filling the customer order at
// each station with one item from that station if requested. Once this filling step is done 
// at each station, this function checks if there is a customer order to be released at each
// station on the line in the order in which the user has specified. If there is an order to be
// released, this function releases the order from the station. If the station is not the last
// station, this function moves the order to the next station. If the station is the last one,
// this function moves the order to the completed or incomplete set as appropriate. Note
// that this function executes this step on all the stations in the order in which the user has
// entered the stations, and not necessarily in the order of their linkage. (This execution
// order is important for matching the intermediate output generated by this function).
// This function returns true if all the orders have been processed; false otherwise.



bool run(std::ostream& os)
{
	bool notCompleted{false};

	// if last customer order waiting to be filled
	if (!myCustomerOrder[myCustomerOrder.size()].isFilled())
	{
		// move to starting station
		myStation[index].pop(std::move(myCustomerOrder[0]));
		for (int index = 0; index < myStation.size(); index++)
		{
			if (myStation[index].hasAnOrderToRelease())
			{
				// execute fill of assembly at each station on line		
				myStation[index].fill(os);		
			}
			else
			{
				notCompleted = true;
			}	
		}
		
	}
	if (notCompleted) 
	{ 
		incompleteOrders.push_back(myCustomerOrder[myCustomerOrder.size()]); 
	}
}

		
















































