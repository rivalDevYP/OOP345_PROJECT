#include "LineManager.h"

namespace sict
{
	LineManager::LineManager(std::vector<Station*> &incomingStationAddr, std::vector<size_t> &incomingsizetobjects, std::vector<CustomerOrder> &incomingCustomerOrders, int index, std::ostream& os)
	{
		myStation = incomingStationAddr;
		myCustomerOrder = std::move(incomingCustomerOrders);
		myIndexes = incomingsizetobjects;
		startingVal = index;
		myOutputStream = &os;
		secondVal = myIndexes.at(startingVal);
	}

	void LineManager::display(std::ostream& os) const
	{
		for (size_t index = 0; index < myCustomerOrder.size(); index++)
		{
			if (!myCustomerOrder[index].isFilled())
			{
				myCustomerOrder[index].display(os);
			}
		}
	}

	bool LineManager::run(std::ostream& os)
	{
		/* bool run(std::ostream& os) â€“ a modifier that receives a reference to an std::ostream object. 

		If there is a customer order on the back of the queue of orders waiting to be filled, this function moves it to the starting station on the line. 

		This function then executes one fill step of the assembly process at each station on the line, by filling the customer order at each station with one item from that station if requested. 

		Once this filling step is done at each station, this function checks if there is a customer order to be released at each station on the line in the order in which the user has specified. 

		If there is an order to be released, this function releases the order from the station. 
		
		If the station is not the last station, this function moves the order to the next station. 
		
		If the station is the last one, this function moves the order to the completed or incomplete set as appropriate. 
		
		Note that this function executes this step on all the stations in the order in which the user has entered the stations, and not necessarily in the order of their linkage. 
		
		(This execution order is important for matching the intermediate output generated by this function). 
		
		This function returns true if all the orders have been processed; false otherwise. */

		
	}
}
